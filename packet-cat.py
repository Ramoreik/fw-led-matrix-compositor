#!/usr/bin/env python3
import random
import threading
from compositor import Element, Compositor, Anim, Static

from scapy.all import sniff

# TODO: 
# Change symbol used for different packet type.
# TCP
# HTTP
# DNS
# ICMP

# TODO: 
# Make the cat adapt to the amount of packets floating.


class BasePacket(Static):
    def __init__(self):
        self.center = [0,0]
        self.frame = [
                        [1],
                    ]

class DnsPacket(Static):
    def __init__(self):
        self.center = [0,0]
        self.frame = [
                        [1],
                        [1],
                    ]

class HTTPPacket(Static):
    def __init__(self):
        self.center = [0,0]
        self.frame = [
                        [0,1,1],
                        [0,1,0],
                    ]


class Cat(Anim):
    def __init__(self):
        self.tick = 0
        self.reset = 11
        self.tick_rate = 0.1
        self.center = [0,0]
        self.frames = [
                    [
                        [0,0,1,0,0,0,1,0,0],
                        [0,1,0,1,0,1,0,1,0],
                        [0,1,0,0,1,0,0,1,0],
                        [1,0,0,0,0,0,0,0,1],
                        [1,0,1,0,0,0,1,0,1],
                        [1,0,0,0,0,0,0,0,1],
                        [0,1,0,0,0,0,0,1,0],
                        [0,0,1,0,0,0,1,0,0],
                        [0,1,0,0,0,0,0,1,0],
                        [1,0,0,0,0,0,0,0,1],
                        [1,0,0,0,0,0,0,0,1],
                        [1,0,0,0,0,0,0,0,1],
                    ],
                    [
                        [0,0,1,0,0,0,1,0,0],
                        [0,1,0,1,0,1,0,1,0],
                        [0,1,0,0,1,0,0,1,0],
                        [1,0,0,0,0,0,0,0,1],
                        [1,0,1,0,0,0,1,0,1],
                        [1,0,0,0,0,0,0,0,1],
                        [0,1,0,0,0,0,0,1,0],
                        [0,0,1,0,0,0,1,0,0],
                        [0,1,0,0,0,0,0,1,0],
                        [1,0,0,0,0,0,0,0,1],
                        [1,0,0,0,0,0,0,0,1],
                        [1,0,0,0,0,0,0,0,1],
                    ],
                    [
                        [0,0,1,0,0,0,1,0,0],
                        [0,1,0,1,0,1,0,1,0],
                        [0,1,0,0,1,0,0,1,0],
                        [1,0,0,0,0,0,0,0,1],
                        [1,0,1,0,0,0,1,0,1],
                        [1,0,0,0,0,0,0,0,1],
                        [0,1,0,0,0,0,0,1,0],
                        [0,0,1,0,0,0,1,0,0],
                        [0,1,0,0,0,0,0,1,0],
                        [1,0,0,0,0,0,0,0,1],
                        [1,0,0,0,0,0,0,0,1],
                        [1,0,0,0,0,0,0,0,1],
                    ],
                    [
                        [0,0,1,0,0,0,1,0,0],
                        [0,1,0,1,0,1,0,1,0],
                        [0,1,0,0,1,0,0,1,0],
                        [1,0,0,0,0,0,0,0,1],
                        [1,0,1,0,0,0,1,0,1],
                        [1,0,0,0,0,0,0,0,1],
                        [0,1,0,0,0,0,0,1,0],
                        [0,0,1,0,0,0,1,0,0],
                        [0,1,0,0,0,0,0,1,0],
                        [1,0,0,0,0,0,0,0,1],
                        [1,0,0,0,0,0,0,0,1],
                        [1,0,0,0,0,0,0,0,1],
                    ],
                    [
                        [0,0,1,0,0,0,1,0,0],
                        [0,1,0,1,0,1,0,1,0],
                        [0,1,0,0,1,0,0,1,0],
                        [1,0,0,0,0,0,0,0,1],
                        [1,0,1,0,0,0,1,0,1],
                        [1,0,0,0,0,0,0,0,1],
                        [0,1,0,0,0,0,0,1,0],
                        [0,0,1,0,0,0,1,0,0],
                        [0,1,0,0,0,0,0,1,0],
                        [1,0,0,0,0,0,0,0,1],
                        [1,0,0,0,0,0,0,0,1],
                        [1,0,0,0,0,0,0,0,1],
                    ],
                    [
                        [0,0,1,0,0,0,1,0,0],
                        [0,1,0,1,0,1,0,1,0],
                        [0,1,0,0,1,0,0,1,0],
                        [1,0,0,0,0,0,0,0,1],
                        [1,1,0,0,0,1,0,0,1],
                        [1,0,0,0,0,0,0,0,1],
                        [0,1,0,0,0,0,0,1,0],
                        [0,0,1,0,0,0,1,0,0],
                        [0,1,0,0,0,0,0,1,0],
                        [1,0,0,0,0,0,0,0,1],
                        [1,0,0,0,0,0,0,0,1],
                        [1,0,0,0,0,0,0,0,1],
                    ],
                    [
                        [0,0,1,0,0,0,1,0,0],
                        [0,1,0,1,0,1,0,1,0],
                        [0,1,0,0,1,0,0,1,0],
                        [1,0,0,0,0,0,0,0,1],
                        [1,1,0,0,0,1,0,0,1],
                        [1,0,0,0,0,0,0,0,1],
                        [0,1,0,0,0,0,0,1,0],
                        [0,0,1,0,0,0,1,0,0],
                        [0,1,0,0,0,0,0,1,0],
                        [1,0,0,0,0,0,0,0,1],
                        [1,0,0,0,0,0,0,0,1],
                        [1,0,0,0,0,0,0,0,1],
                    ],
                    [
                        [0,0,1,0,0,0,1,0,0],
                        [0,1,0,1,0,1,0,1,0],
                        [0,1,0,0,1,0,0,1,0],
                        [1,0,0,0,0,0,0,0,1],
                        [1,1,0,0,0,1,0,0,1],
                        [1,0,0,0,0,0,0,0,1],
                        [0,1,0,0,0,0,0,1,0],
                        [0,0,1,0,0,0,1,0,0],
                        [0,1,0,0,0,0,0,1,0],
                        [1,0,0,0,0,0,0,0,1],
                        [1,0,0,0,0,0,0,0,1],
                        [1,0,0,0,0,0,0,0,1],
                    ],
                    [
                        [0,0,1,0,0,0,1,0,0],
                        [0,1,0,1,0,1,0,1,0],
                        [0,1,0,0,1,0,0,1,0],
                        [1,0,0,0,0,0,0,0,1],
                        [1,0,1,0,0,0,1,0,1],
                        [1,0,0,0,0,0,0,0,1],
                        [0,1,0,0,0,0,0,1,0],
                        [0,0,1,0,0,0,1,0,0],
                        [0,1,0,0,0,0,0,1,0],
                        [1,0,0,0,0,0,0,0,1],
                        [1,0,0,0,0,0,0,0,1],
                        [1,0,0,0,0,0,0,0,1],
                    ],
                    [
                        [0,0,1,0,0,0,1,0,0],
                        [0,1,0,1,0,1,0,1,0],
                        [0,1,0,0,1,0,0,1,0],
                        [1,0,1,0,0,0,1,0,1],
                        [1,0,0,0,0,0,0,0,1],
                        [1,0,0,0,1,0,0,0,1],
                        [0,1,0,0,0,0,0,1,0],
                        [0,0,1,0,0,0,1,0,0],
                        [0,1,0,0,0,0,0,1,0],
                        [1,0,0,0,0,0,0,0,1],
                        [1,0,0,0,0,0,0,0,1],
                        [1,0,0,0,0,0,0,0,1],
                    ],
                    [
                        [0,0,1,0,0,0,1,0,0],
                        [0,1,0,1,0,1,0,1,0],
                        [0,1,0,0,1,0,0,1,0],
                        [1,0,1,0,0,0,1,0,1],
                        [1,0,0,0,0,0,0,0,1],
                        [1,0,0,0,1,0,0,0,1],
                        [0,1,0,0,0,0,0,1,0],
                        [0,0,1,0,0,0,1,0,0],
                        [0,1,0,0,0,0,0,1,0],
                        [1,0,0,0,0,0,0,0,1],
                        [1,0,0,0,0,0,0,0,1],
                        [1,0,0,0,0,0,0,0,1],
                    ],
                    [
                        [0,0,1,0,0,0,1,0,0],
                        [0,1,0,1,0,1,0,1,0],
                        [0,1,0,0,1,0,0,1,0],
                        [1,0,0,0,0,0,0,0,1],
                        [1,0,1,0,0,0,1,0,1],
                        [1,0,0,0,0,0,0,0,1],
                        [0,1,0,0,0,0,0,1,0],
                        [0,0,1,0,0,0,1,0,0],
                        [0,1,0,0,0,0,0,1,0],
                        [1,0,0,0,0,0,0,0,1],
                        [1,0,0,0,0,0,0,0,1],
                        [1,0,0,0,0,0,0,0,1],
                    ]
                 ]


def cat_packets(device):
    def add(packet):
        # Add an incoming packet to the list of elements
        xpos = 0
        ypos = 0
        if xpos == 0:
            ypos = random.randint(0, 20)
        position = [xpos, ypos ]
        fall_speed = random.randint(-2, -1)
        wind = 0
        if random.randint(0, 100) <= 50:
            wind = -1
        vector = [-1 + wind, fall_speed ]
        c.add_element(Element(BasePacket(), vector, position))
        del packet

    def sniffing():
        # store=0 prevents memory leak due to scapy saving the packets internally
        sniff(prn=add, store=0)

    c = Compositor([9, 34], device)
    c.add_element(Element(Cat(), [0,0], [0,22]))
    t = threading.Thread(target=sniffing,args=())
    t.start()
    while True:
        c.render()

if __name__ == "__main__":
    device = "/dev/ttyACM0"
    cat_packets(device)
